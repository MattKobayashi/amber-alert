---
name: Build and test container image

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REPO_NAME: mattkobayashi
  IMAGE_NAME: amber-alert

jobs:
  create-runner:
    name: Create self-hosted Actions runner
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        runner-name: [
          amber-alert
        ]
      max-parallel: 1
    steps:
      - name: Create self-hosted Actions runner
        uses: MattKobayashi/tailscale-runner-action@v1.1.0
        with:
          gh-app-id: ${{ secrets.GH_APP_ID }}
          gh-app-login: MattKobayashi
          gh-app-private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
          runner-network: mattflix
          ssh-host: 100.102.37.118
          ssh-user: matthew
          ts-oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          ts-oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          ts-tag: ci
  build-test:
    name: Build and test container image
    runs-on: self-hosted
    needs: [create-runner]
    permissions:
      contents: read
      packages: write
    steps:
      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
      # Set up Docker Buildx
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["registry-mirror:5000"]
            [registry."registry-mirror:5000"]
              http = true
          driver-opts: |
            network=mattflix
      # Build and export image to Docker daemon
      # https://github.com/docker/build-push-action
      - name: Build and export to Docker
        id: build-export
        uses: docker/build-push-action@v6.8.0
        with:
          load: true
          tags: "${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:test"
      # Install uuid-runtime package
      - name: Install `uuid-runtime`
        run: |
          set -x
          apt-get --yes install uuid-runtime
      # Test the built image
      - name: Test image
        run: |
          set -x
          CONTAINER_ID="$(uuidgen)"
          docker container run --attach=stdout --attach=stderr --init --name=$CONTAINER_ID --rm ${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:test &
          sleep 60
          docker container stop $CONTAINER_ID
      # Remove the test image
      - name: Remove test image
        if: ${{ !cancelled() }}
        run: |
          set -x
          docker image rm --force ${{ steps.build-export.outputs.imageid }}
